<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.chill.inventory.mapper.InventoryMapper">
    <resultMap id="inventoryStatusResultMap" type="kr.co.chill.inventory.dto.InventoryStatusDTO">
        <result property="materialCode" column="materialCode"/>
        <result property="materialDesc" column="materialDesc"/>
        <result property="plantCode" column="plantCode"/>
        <result property="stockLocation" column="stockLocation"/>
        <result property="openingStock" column="openingStock"/>
        <result property="periodNetChange" column="periodNetChange"/>
        <result property="stockQty" column="stockQty"/>
    </resultMap>

    <resultMap id="materialDocumentResultMap" type="kr.co.chill.inventory.dto.MaterialDocumentDTO">
        <result property="documentNo" column="document_no"/>
        <result property="materialCode" column="materialCode"/>
        <result property="materialDesc" column="materialDesc"/>
        <result property="quantity" column="quantity"/>
        <result property="plantCode" column="plantCode"/>
        <result property="stockLocation" column="stockLocation"/>
        <result property="documentDate" column="document_date"/>
        <result property="documentType" column="document_type"/>
    </resultMap>

    <resultMap id="inventoryReportResultMap" type="kr.co.chill.inventory.dto.InventoryReportDTO">
        <result property="materialType" column="materialType"/>
        <result property="plantCode" column="plantCode"/>
        <result property="stockLocation" column="stockLocation"/>
        <result property="openingStockQty" column="openingStockQty"/>
        <result property="periodNetChangeQty" column="periodNetChangeQty"/>
        <result property="stockQty" column="stockQty"/>
        <result property="openingStockAmount" column="openingStockAmount"/>
        <result property="inventoryAmount" column="inventoryAmount"/>
        <result property="periodNetChangeAmount" column="periodNetChangeAmount"/>
    </resultMap>

    <select id="selectInventoryStatus" parameterType="map" resultMap="inventoryStatusResultMap">
    <!-- [수정] id 변경 (동사+명사 형태 권장), parameterType 명확화 (map), resultMap 사용 -->
    <![CDATA[
        WITH
        OpeningSnapshot AS (
            SELECT
                ms.material_no,
                ms.plant_code,
                ms.mstorage_code,
                ms.mstorage_stock AS opening_stock,
                ms.snapshot_month
            FROM chill.material_storage ms
            WHERE ms.snapshot_month = #{snapshotDate}
        ),
        PeriodDelta AS (
            SELECT
                st.material_no, st.plant_code, st.mstorage_code,
                SUM(st.quantity) AS delta_quantity
            FROM (
                SELECT mi.material_no, mi.plant_code, mi.mstorage_code, mi.material_in_cnt AS quantity
                FROM chill.material_in mi
                WHERE mi.material_in_date >= #{startDate} AND mi.material_in_date < DATE_ADD(#{endDate}, INTERVAL 1 DAY)
                UNION ALL
                SELECT mo.material_no, mo.plant_code, mo.mstorage_code, -mo.material_out_cnt AS quantity
                FROM chill.material_out mo
                WHERE mo.material_out_date >= #{startDate} AND mo.material_out_date < DATE_ADD(#{endDate}, INTERVAL 1 DAY)
            ) st
            GROUP BY st.material_no, st.plant_code, st.mstorage_code
        )
        SELECT
            mm.material_code        AS materialCode,
            mm.material_name        AS materialDesc,
            snap.plant_code         AS plantCode,
            snap.mstorage_code      AS stockLocation,
            COALESCE(snap.opening_stock, 0) AS openingStock,
            COALESCE(delta.delta_quantity, 0) AS periodNetChange,
            (COALESCE(snap.opening_stock, 0) + COALESCE(delta.delta_quantity, 0)) AS stockQty
        FROM OpeningSnapshot snap
        JOIN chill.material mm on snap.material_no = mm.material_no
        LEFT JOIN PeriodDelta delta on snap.material_no = delta.material_no
                AND snap.plant_code = delta.plant_code
                AND snap.mstorage_code = delta.mstorage_code
    ]]>
    <where>
        <if test="materialCodeFrom != null and materialCodeFrom !=''">
            <![CDATA[ AND mm.material_code >= #{materialCodeFrom} ]]>
        </if>
        <if test="materialCodeTo != null and materialCodeTo != ''">
            <![CDATA[ AND mm.material_code <= #{materialCodeTo} ]]>
        </if>
        <if test="plantCodeFrom != null and plantCodeFrom != ''">
            <![CDATA[ AND snap.plant_code >= #{plantCodeFrom} ]]>
        </if>
        <if test="plantCodeTo != null and plantCodeTo != ''">
            <![CDATA[ AND snap.plant_code <= #{plantCodeTo} ]]>
        </if>
        <if test="storageCodeFrom != null and storageCodeFrom != ''">
            <![CDATA[ AND snap.mstorage_code >= #{storageCodeFrom} ]]>
        </if>
        <if test="storageCodeTo != null and storageCodeTo != ''">
            <![CDATA[ AND snap.mstorage_code <= #{storageCodeTo} ]]>
        </if>
    </where>
    <![CDATA[
        ORDER BY mm.material_code, snap.plant_code, snap.mstorage_code
    ]]>
    </select>

	<select id="selectMaterialDocuments" parameterType="map" resultMap="materialDocumentResultMap">
    <![CDATA[
        SELECT
            mat_io.document_no,
            mm.material_code AS materialCode,
            mm.material_name AS materialDesc,
            mat_io.quantity,
            mat_io.plant_code AS plantCode,
            mat_io.mstorage_code AS stockLocation,
            mat_io.document_date,
            mat_io.document_type
        FROM (
            SELECT mi.material_in_no AS document_no, mi.material_no, mi.material_in_cnt AS quantity,
                   mi.plant_code, mi.mstorage_code, mi.material_in_date AS document_date, 'IN' AS document_type
            FROM chill.material_in mi
            
            UNION ALL

            SELECT mo.material_out_no AS document_no, mo.material_no, mo.material_out_cnt AS quantity,
                   mo.plant_code, mo.mstorage_code, mo.material_out_date AS document_date, 'OUT' AS document_type
            FROM chill.material_out mo
            
        ) mat_io
        JOIN chill.material mm ON mat_io.material_no = mm.material_no
    ]]>
    <where>
        <!-- 기간 필터 -->
        <![CDATA[ mat_io.document_date >= #{startDate} AND mat_io.document_date < DATE_ADD(#{endDate}, INTERVAL 1 DAY) ]]>
        <!-- 자재 코드 필터 -->
        <if test="materialCodeFrom != null and materialCodeFrom != ''">
            <![CDATA[ AND mm.material_code >= #{materialCodeFrom} ]]>
        </if>
        <if test="materialCodeTo != null and materialCodeTo != ''">
            <![CDATA[ AND mm.material_code <= #{materialCodeTo} ]]>
        </if>
        <!-- 플랜트 필터 -->
        <if test="plantCodeFrom != null and plantCodeFrom != ''">
            <![CDATA[ AND mat_io.plant_code >= #{plantCodeFrom} ]]>
        </if>
        <if test="plantCodeTo != null and plantCodeTo != ''">
            <![CDATA[ AND mat_io.plant_code <= #{plantCodeTo} ]]>
        </if>
        <!-- 저장 위치 필터 -->
        <if test="storageCodeFrom != null and storageCodeFrom != ''">
            <![CDATA[ AND mat_io.mstorage_code >= #{storageCodeFrom} ]]>
        </if>
        <if test="storageCodeTo != null and storageCodeTo != ''">
            <![CDATA[ AND mat_io.mstorage_code <= #{storageCodeTo} ]]>
        </if>
    </where>
    <![CDATA[
        ORDER BY mat_io.document_date, mat_io.document_type
    ]]>
</select>

    <select id="selectInventoryReport" parameterType="map" resultMap="inventoryReportResultMap">
    <!-- [수정] id 변경, resultMap 사용 -->
    <![CDATA[
        WITH
        UnitPrice AS (
            SELECT mup.material_no, mup.sell_mprice FROM chill.material_unit_price mup
        ),
        OpeningSnapshot AS (
            SELECT ms.material_no, ms.plant_code, ms.mstorage_code, ms.mstorage_stock AS opening_stock, ms.snapshot_month
            FROM chill.material_storage ms
            WHERE ms.snapshot_month = #{snapshotDate}
        ),
        PeriodDelta AS (
            SELECT st.material_no, st.plant_code, st.mstorage_code, SUM(st.quantity) AS delta_quantity, st.transaction_month
            FROM (
                SELECT mi.material_no, mi.plant_code, mi.mstorage_code, mi.material_in_cnt AS quantity, DATE_FORMAT(mi.material_in_date, '%Y-%m') AS transaction_month
                FROM chill.material_in mi
                WHERE mi.material_in_date >= #{startDate} AND mi.material_in_date < DATE_ADD(#{endDate}, INTERVAL 1 DAY)
                UNION ALL
                SELECT mo.material_no, mo.plant_code, mo.mstorage_code, -mo.material_out_cnt AS quantity, DATE_FORMAT(mo.material_out_date, '%Y-%m') AS transaction_month
                FROM chill.material_out mo
                WHERE mo.material_out_date >= #{startDate} AND mo.material_out_date < DATE_ADD(#{endDate}, INTERVAL 1 DAY)
            ) st
            GROUP BY st.material_no, st.plant_code, st.mstorage_code, st.transaction_month
        ),
        MaterialType AS (
            SELECT mm.material_no, mm.material_code, SUBSTRING(mm.material_code, 2, 3) AS material_type
            FROM chill.material mm
        )
        SELECT
            mt.material_type        AS materialType,
            snap.plant_code         AS plantCode,
            snap.mstorage_code      AS stockLocation,
            COALESCE(SUM(snap.opening_stock), 0)    AS openingStockQty,
            COALESCE(SUM(delta.delta_quantity), 0)  AS periodNetChangeQty,
            (COALESCE(SUM(snap.opening_stock), 0) + COALESCE(SUM(delta.delta_quantity), 0)) AS stockQty,
            COALESCE(SUM(snap.opening_stock * COALESCE(up.sell_mprice, 0)), 0) AS openingStockAmount,
            COALESCE(SUM((COALESCE(snap.opening_stock, 0) + COALESCE(delta.delta_quantity, 0)) * COALESCE(up.sell_mprice, 0)), 0) AS inventoryAmount,
            (COALESCE(SUM((COALESCE(snap.opening_stock, 0) + COALESCE(delta.delta_quantity, 0)) * COALESCE(up.sell_mprice, 0)), 0) -
             COALESCE(SUM(snap.opening_stock * COALESCE(up.sell_mprice, 0)), 0)) AS periodNetChangeAmount
        FROM OpeningSnapshot snap
        LEFT JOIN PeriodDelta delta ON snap.material_no = delta.material_no
                AND snap.plant_code = delta.plant_code
                AND snap.mstorage_code = delta.mstorage_code
                AND DATE_FORMAT(snap.snapshot_month, '%Y-%m') = delta.transaction_month
        JOIN MaterialType mt ON snap.material_no = mt.material_no
        LEFT JOIN UnitPrice up ON snap.material_no = up.material_no
    ]]>
<where>
    <if test="materialTypeFrom != null and materialTypeFrom != ''">
        <![CDATA[ AND mt.material_type >= #{materialTypeFrom} ]]>
    </if>
    <if test="materialTypeTo != null and materialTypeTo != ''">
        <![CDATA[ AND mt.material_type <= #{materialTypeTo} ]]>
    </if>
    <if test="materialCodeFrom != null and materialCodeFrom != ''">
        <![CDATA[ AND mt.material_code >= #{materialCodeFrom} ]]>
    </if>
    <if test="materialCodeTo != null and materialCodeTo != ''">
        <![CDATA[ AND mt.material_code <= #{materialCodeTo} ]]>
    </if>
    <if test="storageCodeFrom != null and storageCodeFrom != ''">
        <![CDATA[ AND snap.mstorage_code >= #{storageCodeFrom} ]]>
    </if>
    <if test="storageCodeTo != null and storageCodeTo != ''">
        <![CDATA[ AND snap.mstorage_code <= #{storageCodeTo} ]]>
    </if>
    <!-- [수정] queryMonth 관련 필터 제거: Java 서비스에서 snapshotDate, startDate, endDate를 계산하여 전달하므로 중복 -->
</where>
    <![CDATA[
        GROUP BY mt.material_type, snap.plant_code, snap.mstorage_code
        ORDER BY mt.material_type, snap.plant_code, snap.mstorage_code
    ]]>
    </select>
</mapper>